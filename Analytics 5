# Завдання 1:
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def isSameTree(p, q):
    if not p and not q:
        return True
    if not p or not q:
        return False
    return p.val == q.val and isSameTree(p.left, q.left) and isSameTree(p.right, q.right)


tree1 = TreeNode(1)
tree1.left = TreeNode(2)
tree1.right = TreeNode(3)

tree2 = TreeNode(1)
tree2.left = TreeNode(2)
tree2.right = TreeNode(3)

print(isSameTree(tree1, tree2))

tree3 = TreeNode(1)
tree3.left = TreeNode(2)

tree4 = TreeNode(1)
tree4.right = TreeNode(2)

print(isSameTree(tree3, tree4)) 

tree5 = TreeNode(1)
tree5.left = TreeNode(2)
tree5.right = TreeNode(1)

tree6 = TreeNode(1)
tree6.left = TreeNode(1)
tree6.right = TreeNode(2)

print(isSameTree(tree5, tree6))

# Завдання 2: 
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def isSymmetric(root):
    def isMirror(left, right):
        if not left and not right:
            return True
        if not left or not right:
            return False
        return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)

    if not root:
        return True
    return isMirror(root.left, root.right)

symmetric_tree1 = TreeNode(1)
symmetric_tree1.left = TreeNode(2)
symmetric_tree1.right = TreeNode(2)
symmetric_tree1.left.left = TreeNode(3)
symmetric_tree1.left.right = TreeNode(4)
symmetric_tree1.right.left = TreeNode(4)
symmetric_tree1.right.right = TreeNode(3)

print(isSymmetric(symmetric_tree1))  

non_symmetric_tree2 = TreeNode(1)
non_symmetric_tree2.left = TreeNode(2)
non_symmetric_tree2.right = TreeNode(2)
non_symmetric_tree2.left.right = TreeNode(3)
non_symmetric_tree2.right.right = TreeNode(3)

print(isSymmetric(non_symmetric_tree2)) 

non_symmetric_tree3 = TreeNode(1)
non_symmetric_tree3.left = TreeNode(2)
non_symmetric_tree3.right = TreeNode(1)

symmetric_tree4 = TreeNode(1)
symmetric_tree4.left = TreeNode(1)
symmetric_tree4.right = TreeNode(2)

print(isSymmetric(non_symmetric_tree3)) 

# Завдання 3:

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def invertTree(root):
    if root is None:
        return None

    root.left, root.right = invertTree(root.right), invertTree(root.left)
    return root

tree1 = TreeNode(4)
tree1.left = TreeNode(2)
tree1.right = TreeNode(7)
tree1.left.left = TreeNode(1)
tree1.left.right = TreeNode(3)
tree1.right.left = TreeNode(6)
tree1.right.right = TreeNode(9)

inverted_tree1 = invertTree(tree1)

tree2 = TreeNode(2)
tree2.left = TreeNode(1)
tree2.right = TreeNode(3)

inverted_tree2 = invertTree(tree2)

tree3 = None
inverted_tree3 = invertTree(tree3)

def printTreeBFS(root):
    if root is None:
        return
    queue = [root]
    result = []
    while queue:
        node = queue.pop(0)
        if node:
            result.append(node.val)
            queue.append(node.left)
            queue.append(node.right)
    print(result)

printTreeBFS(inverted_tree1)  
printTreeBFS(inverted_tree2)  
printTreeBFS(inverted_tree3)  

# Завдання 4:
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def kthSmallest(root, k):
    def inOrderTraversal(node):
        if not node:
            return []
        return inOrderTraversal(node.left) + [node.val] + inOrderTraversal(node.right)

    inorder_values = inOrderTraversal(root)
    return inorder_values[k - 1]

tree1 = TreeNode(3)
tree1.left = TreeNode(1)
tree1.right = TreeNode(4)
tree1.left.right = TreeNode(2)

result1 = kthSmallest(tree1, 1)

tree2 = TreeNode(5)
tree2.left = TreeNode(3)
tree2.right = TreeNode(6)
tree2.left.left = TreeNode(2)
tree2.left.right = TreeNode(4)
tree2.left.left.left = TreeNode(1)

result2 = kthSmallest(tree2, 3)

print(result1)
print(result2)

# Завдання 5:
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def serialize(root):
    if not root:
        return "[]"

    result = []
    queue = [root]

    while queue:
        node = queue.pop(0)
        if node:
            result.append(str(node.val))
            queue.append(node.left)
            queue.append(node.right)
        else:
            result.append("null")

    while result and result[-1] == "null":
        result.pop()

    return "[" + ",".join(result) + "]"

def deserialize(data):
    if data == "[]":
        return None

    values = data[1:-1].split(",")
    root = TreeNode(int(values[0]))
    queue = [root]
    i = 1

    while queue:
        node = queue.pop(0)

        if values[i] != "null":
            node.left = TreeNode(int(values[i]))
            queue.append(node.left)
        i += 1

        if values[i] != "null":
            node.right = TreeNode(int(values[i]))
            queue.append(node.right)
        i += 1

    return root

tree = TreeNode(1)
tree.left = TreeNode(2)
tree.right = TreeNode(3)
tree.right.left = TreeNode(4)
tree.right.right = TreeNode(5)

serialized_tree = serialize(tree)
print(serialized_tree)

deserialized_tree = deserialize(serialized_tree)

# Завдання 6: 
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def maxPathSum(root):
    def max_gain(node):
        nonlocal max_sum
        if not node:
            return 0

        left_gain = max(max_gain(node.left), 0)
        right_gain = max(max_gain(node.right), 0)

        node_gain = node.val + left_gain + right_gain

        max_sum = max(max_sum, node_gain)

        return node.val + max(left_gain, right_gain)

    max_sum = float('-inf')
    max_gain(root)
    return max_sum

tree = TreeNode(1)
tree.left = TreeNode(2)
tree.right = TreeNode(3)

print(maxPathSum(tree))

tree = TreeNode(-10)
tree.left = TreeNode(9)
tree.right = TreeNode(20)
tree.right.left = TreeNode(15)
tree.right.right = TreeNode(7)

print(maxPathSum(tree))

# Завдання 7:
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def minCameraCover(root):
    def dfs(node):
        nonlocal cameras
        if not node:
            return 0
        left = dfs(node.left)
        right = dfs(node.right)
        if left == 1 or right == 1:
            cameras += 1
            return -1
        if left == -1 or right == -1:
            return 0
        return 1

    cameras = 0
    if dfs(root) == 1:
        cameras += 1
    return cameras

# Приклад використання
tree1 = TreeNode(0, TreeNode(0, None, TreeNode(0)))
print(minCameraCover(tree1)) 

tree2 = TreeNode(0, TreeNode(0, None, TreeNode(0, None, TreeNode(0)))))
print(minCameraCover(tree2)) 

# Завдання 8:
from collections import defaultdict, deque

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def verticalTraversal(root):
    if not root:
        return []

    columns = defaultdict(list)
    queue = deque([(root, 0, 0)])

    while queue:
        node, row, col = queue.popleft()
        columns[col].append((row, node.val))

        if node.left:
            queue.append((node.left, row + 1, col - 1))
        if node.right:
            queue.append((node.right, row + 1, col + 1))

    result = []
    for col in sorted(columns.keys()):
        result.append([val for _, val in sorted(columns[col])])

    return result

# Приклад використання
tree1 = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7)))
print(verticalTraversal(tree1))

tree2 = TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5, TreeNode(6), TreeNode(7))), TreeNode(3))
print(verticalTraversal(tree2)) 

# Завдання 9:
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def buildTree(preorder):
    if not preorder:
        return None

    stack = []
    root = TreeNode(int(preorder[0]))
    stack.append(root)

    for value in preorder[1:]:
        node = TreeNode(int(value))
        if stack[-1].left is None:
            stack[-1].left = node
        else:
            while stack[-1].right is not None:
                stack.pop()
            stack[-1].right = node
        stack.append(node)

    return root

traversal1 = "1-2--3--4-5--6--7"
root1 = buildTree(traversal1)

traversal2 = "1-2--3---4-5--6---7"
root2 = buildTree(traversal2)

traversal3 = "1-401--349---90--88"
root3 = buildTree(traversal3)

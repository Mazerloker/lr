# Завдання 1: 
def find_first_unique_char(s):
    char_count = {}

    for char in s:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1

    for i, char in enumerate(s):
        if char_count[char] == 1:
            return i

    return -1

print(find_first_unique_char("leopard"))
print(find_first_unique_char("loveleopard"))
print(find_first_unique_char("aabb"))

# Завдання 2: 
from collections import deque

class MyStack:
    def __init__(self):
        self.queue1 = deque()
        self.queue2 = deque()

    def push(self, x):
        self.queue1.append(x)
        while self.queue2:
            self.queue1.append(self.queue2.popleft())
        self.queue1, self.queue2 = self.queue2, self.queue1

    def pop(self):
        return self.queue2.popleft()

    def top(self):
        return self.queue2[0]

    def empty(self):
        return not bool(self.queue2)

myStack = MyStack()
myStack.push(1)
myStack.push(2)
print(myStack.top())
print(myStack.pop())
print(myStack.empty())

# Завдання 3.1: 
from collections import deque

class RecentCounter:
    def __init__(self):
        self.requests = deque()

    def ping(self, t):
        self.requests.append(t)
        while self.requests and self.requests[0] < t - 3000:
            self.requests.popleft()
        return len(self.requests)

recentCounter = RecentCounter()
print(recentCounter.ping(1))
print(recentCounter.ping(100))
print(recentCounter.ping(3001))
print(recentCounter.ping(3002))

# Завдання 3.2:
class MyCircularDeque:
    def __init__(self, k):
        self.capacity = k
        self.size = 0
        self.front = 0
        self.rear = 0
        self.circularDeque = [None] * k

    def insertFront(self, value):
        if not self.isFull():
            self.front = (self.front - 1) % self.capacity
            self.circularDeque[self.front] = value
            self.size += 1
            return True
        return False

    def insertLast(self, value):
        if not self.isFull():
            self.circularDeque[self.rear] = value
            self.rear = (self.rear + 1) % self.capacity
            self.size += 1
            return True
        return False

    def deleteFront(self):
        if not self.isEmpty():
            self.front = (self.front + 1) % self.capacity
            self.size -= 1
            return True
        return False

    def deleteLast(self):
        if not self.isEmpty():
            self.rear = (self.rear - 1) % self.capacity
            self.size -= 1
            return True
        return False

    def getFront(self):
        return -1 if self.isEmpty() else self.circularDeque[self.front]

    def getRear(self):
        return -1 if self.isEmpty() else self.circularDeque[(self.rear - 1) % self.capacity]

    def isEmpty(self):
        return self.size == 0

    def isFull(self):
        return self.size == self.capacity

myCircularDeque = MyCircularDeque(3)
print(myCircularDeque.insertLast(1))
print(myCircularDeque.insertLast(2))
print(myCircularDeque.insertFront(3))
print(myCircularDeque.insertFront(4))
print(myCircularDeque.getRear())
print(myCircularDeque.isFull())
print(myCircularDeque.deleteLast())
print(myCircularDeque.insertFront(4))
print(myCircularDeque.getFront())

# Завдання 4:
class MyCircularQueue:
    def __init__(self, k):
        self.capacity = k
        self.size = 0
        self.front = 0
        self.rear = -1
        self.circularQueue = [None] * k

    def Front(self):
        return -1 if self.isEmpty() else self.circularQueue[self.front]

    def Rear(self):
        return -1 if self.isEmpty() else self.circularQueue[self.rear]

    def enQueue(self, value):
        if not self.isFull():
            self.rear = (self.rear + 1) % self.capacity
            self.circularQueue[self.rear] = value
            self.size += 1
            return True
        return False

    def deQueue(self):
        if not self.isEmpty():
            self.front = (self.front + 1) % self.capacity
            self.size -= 1
            return True
        return False

    def isEmpty(self):
        return self.size == 0

    def isFull(self):
        return self.size == self.capacity

myCircularQueue = MyCircularQueue(3)
print(myCircularQueue.enQueue(1))
print(myCircularQueue.enQueue(2))
print(myCircularQueue.enQueue(3))
print(myCircularQueue.enQueue(4))
print(myCircularQueue.Rear())
print(myCircularQueue.isFull())
print(myCircularQueue.deQueue())
print(myCircularQueue.enQueue(4))
print(myCircularQueue.Rear())

# Завдання 5:
def movesToStamp(stamp, target):
    def can_stamp(i):
        changed = False
        for j in range(len(stamp)):
            if target[i + j] == '?' or target[i + j] == stamp[j]:
                changed = changed or (target[i + j] == stamp[j])
            else:
                return False
        return changed

    def do_stamp(i):
        for j in range(len(stamp)):
            if target[i + j] != '?':
                target[i + j] = '?'

    result = []
    target = list(target)
    stars = sum(c == '?' for c in target)

    while stars < len(target):
        stamped = False

        for i in range(len(target) - len(stamp) + 1):
            if can_stamp(i):
                do_stamp(i)
                result.append(i)
                stars += len(stamp)
                stamped = True

        if not stamped:
            return []

    return result[::-1] 

print(movesToStamp("abc", "ababc"))  
print(movesToStamp("abca", "aabcaca"))  

# Завдання 6:
from collections import deque

def maxSlidingWindow(nums, k):
    result = []
    window = deque()

    for i in range(len(nums)):
        while window and window[0] < i - k + 1:
            window.popleft()

        while window and nums[window[-1]] < nums[i]:
            window.pop()

        window.append(i)

        if i >= k - 1:
            result.append(nums[window[0]])

    return result

nums1 = [1, 3, -1, -3, 5, 3, 6, 7]
k1 = 3
print(maxSlidingWindow(nums1, k1)) 

nums2 = [1]
k2 = 1
print(maxSlidingWindow(nums2, k2)) 

# Завдання 7:
def constrainedSubsetSum(nums, k):
    n = len(nums)
    dp = [0] * n
    deque = []

    for i in range(n):
        while deque and deque[0] < i - k:
            deque.pop(0)

        dp[i] = max(0, nums[i] + (dp[deque[0]] if deque else 0))

        while deque and dp[i] > dp[deque[-1]]:
            deque.pop()

        deque.append(i)

    return max(dp)

nums1 = [10, 2, -10, 5, 20]
k1 = 2
print(constrainedSubsetSum(nums1, k1)) 
nums2 = [-1, -2, -3]
k2 = 1
print(constrainedSubsetSum(nums2, k2)) 

nums3 = [10, -2, -10, -5, 20]
k3 = 2
print(constrainedSubsetSum(nums3, k3))
